// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WeatherApi.Models;
using WeatherApi.Services;

namespace WeatherApi.Data
{
    public partial class WeatherdbContext : DbContext
    {
        public WeatherdbContext()
        {
            
        }

        public WeatherdbContext(DbContextOptions<WeatherdbContext> options)
            : base(options)
        {   
        }

        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Measurement> Measurements { get; set; }
        public virtual DbSet<Statistic> Statistics { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                IConfiguration configuration = new ConfigurationBuilder()
                    .SetBasePath(Directory.GetCurrentDirectory())
                    .AddJsonFile("appsettings.json", optional: false).Build();
                string connStr = configuration.GetConnectionString("WeatherDB");
                optionsBuilder.UseSqlServer(connStr);
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<City>(entity =>
            {
                entity.ToTable("City");

                entity.HasIndex(e => e.CityName, "ux_city")
                    .IsUnique();

                entity.Property(e => e.CityId).HasColumnName("city_id");

                entity.Property(e => e.CityName)
                    .HasMaxLength(32)
                    .IsUnicode(false)
                    .HasColumnName("cityName");
            });

            modelBuilder.Entity<Measurement>(entity =>
            {
                entity.HasKey(e => new { e.CityId, e.Timestamp })
                    .HasName("PK_Measurement_1");

                entity.ToTable("Measurement");

                entity.Property(e => e.CityId).HasColumnName("city_id");

                entity.Property(e => e.Timestamp)
                    .HasColumnType("datetime")
                    .HasColumnName("timestamp");

                entity.Property(e => e.IsArchived).HasColumnName("isArchived");

                entity.Property(e => e.Temperature).HasColumnName("temperature");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Measurements)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Measurement_City");
            });

            modelBuilder.Entity<Statistic>(entity =>
            {
                entity.HasKey(e => e.StatisticsId);

                entity.Property(e => e.StatisticsId).HasColumnName("statistics_id");

                entity.Property(e => e.AvgTemperature).HasColumnName("avgTemperature");

                entity.Property(e => e.CityId).HasColumnName("city_id");

                entity.Property(e => e.FromTime)
                    .HasColumnType("datetime")
                    .HasColumnName("fromTime");

                entity.Property(e => e.LastMeasurementTemperature).HasColumnName("lastMeasurementTemperature");

                entity.Property(e => e.LastMeasurementTime)
                    .HasColumnType("datetime")
                    .HasColumnName("lastMeasurementTime");

                entity.Property(e => e.MaxTemperature).HasColumnName("maxTemperature");

                entity.Property(e => e.MinTemperature).HasColumnName("minTemperature");

                entity.Property(e => e.ToTime)
                    .HasColumnType("datetime")
                    .HasColumnName("toTime");

                entity.HasOne(d => d.City)
                    .WithMany(p => p.Statistics)
                    .HasForeignKey(d => d.CityId)
                    .HasConstraintName("FK_Statistics_City");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}